import mongoose, { Document, Schema } from 'mongoose'

export interface IInvoice extends Document {
  customer: mongoose.Types.ObjectId
  subscription?: mongoose.Types.ObjectId
  merchantId: mongoose.Types.ObjectId // Reference to the merchant
  invoiceNumber: string
  invoiceType: 'B2B' | 'B2C' | 'C2B' // Business-to-Business, Business-to-Customer, Customer-to-Business
  amount: number
  currency: string
  status: 'draft' | 'pending' | 'paid' | 'overdue' | 'cancelled' | 'refunded'
  dueDate: Date
  paidDate?: Date
  issuedDate: Date
  items: {
    description: string
    quantity: number
    unitPrice: number
    total: number
    productId?: mongoose.Types.ObjectId
    subscriptionId?: mongoose.Types.ObjectId
  }[]
  tax?: {
    amount: number
    rate: number
    name: string
  }
  discount?: {
    amount: number
    reason: string
  }
  paymentMethod?: string
  paymentId?: string
  notes?: string
  metadata?: {
    recurring: boolean
    autoGenerated: boolean
    customFields?: Record<string, any>
  }
  createdAt: Date
  updatedAt: Date
}

const InvoiceSchema = new Schema<IInvoice>({
  customer: {
    type: Schema.Types.ObjectId,
    ref: 'Customer',
    required: [true, 'Customer is required']
  },
  subscription: {
    type: Schema.Types.ObjectId,
    ref: 'Subscription'
  },
  merchantId: {
    type: Schema.Types.ObjectId,
    ref: 'Merchant',
    required: [true, 'Merchant is required']
  },
  invoiceNumber: {
    type: String,
    required: [true, 'Invoice number is required'],
    unique: true
  },
  invoiceType: {
    type: String,
    enum: ['B2B', 'B2C', 'C2B'],
    required: [true, 'Invoice type is required'],
    default: 'B2C'
  },
  amount: {
    type: Number,
    required: [true, 'Amount is required'],
    min: [0, 'Amount must be a positive number']
  },
  currency: {
    type: String,
    required: [true, 'Currency is required'],
    default: 'USD',
    uppercase: true
  },
  status: {
    type: String,
    enum: ['draft', 'pending', 'paid', 'overdue', 'cancelled', 'refunded'],
    default: 'pending'
  },
  dueDate: {
    type: Date,
    required: [true, 'Due date is required']
  },
  paidDate: {
    type: Date
  },
  issuedDate: {
    type: Date,
    default: Date.now
  },
  items: [{
    description: {
      type: String,
      required: true
    },
    quantity: {
      type: Number,
      required: true,
      min: [1, 'Quantity must be at least 1']
    },
    unitPrice: {
      type: Number,
      required: true,
      min: [0, 'Unit price must be a positive number']
    },
    total: {
      type: Number,
      required: true
    },
    productId: {
      type: Schema.Types.ObjectId,
      ref: 'Product'
    },
    subscriptionId: {
      type: Schema.Types.ObjectId,
      ref: 'Subscription'
    }
  }],
  tax: {
    amount: { type: Number, min: [0, 'Tax amount must be positive'] },
    rate: { type: Number, min: [0, 'Tax rate must be positive'] },
    name: { type: String, trim: true }
  },
  discount: {
    amount: { type: Number, min: [0, 'Discount amount must be positive'] },
    reason: { type: String, trim: true }
  },
  paymentMethod: {
    type: String,
    trim: true
  },
  paymentId: {
    type: String,
    trim: true
  },
  notes: {
    type: String,
    trim: true
  },
  metadata: {
    recurring: { type: Boolean, default: false },
    autoGenerated: { type: Boolean, default: false },
    customFields: { type: Schema.Types.Mixed }
  }
}, {
  timestamps: true
})

// Indexes for performance
InvoiceSchema.index({ invoiceNumber: 1 })
InvoiceSchema.index({ customer: 1 })
InvoiceSchema.index({ merchantId: 1 })
InvoiceSchema.index({ status: 1 })
InvoiceSchema.index({ invoiceType: 1 })
InvoiceSchema.index({ dueDate: 1 })
InvoiceSchema.index({ paidDate: 1 })

export default mongoose.models.Invoice || mongoose.model<IInvoice>('Invoice', InvoiceSchema)